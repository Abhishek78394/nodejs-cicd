# GitHub Actions CI/CD Pipeline for EC2 Deployment

## Step 1: Prepare Your Repository Structure

Your repository should look like this:
```
your-repo/
├── .github/
│   └── workflows/
│       └── deploy.yml
├── app.js
├── package.json
├── ecosystem.config.js
└── README.md
```

## Step 2: Create GitHub Actions Workflow

Create `.github/workflows/deploy.yml` in your repository:

```yaml
name: Deploy Node.js to EC2

on:
  push:
    branches: [ main, master ]  # Deploy when pushing to main/master
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18.x'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests (if you have any)
      run: npm test || echo "No tests found"
      continue-on-error: true
    
    - name: Check for syntax errors
      run: node -c app.js

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        script: |
          # Navigate to application directory
          cd /var/www/nodejs-app
          
          # Pull latest code
          git pull origin main || git pull origin master
          
          # Install/update dependencies
          npm ci --production
          
          # Restart application with PM2
          pm2 restart nodejs-api || pm2 start ecosystem.config.js --env production
          
          # Save PM2 configuration
          pm2 save
          
          # Reload Nginx (if needed)
          sudo systemctl reload nginx
          
          echo "Deployment completed successfully!"
```

## Step 3: Alternative Workflow with File Transfer

If you prefer to transfer files instead of using git pull:

```yaml
name: Deploy Node.js to EC2 (File Transfer)

on:
  push:
    branches: [ main, master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --production
    
    - name: Create deployment package
      run: |
        tar -czf deployment.tar.gz --exclude='.git' --exclude='node_modules' --exclude='.github' .
    
    - name: Transfer files to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        source: "deployment.tar.gz"
        target: "/tmp/"
    
    - name: Deploy on EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        script: |
          # Backup current deployment
          sudo cp -r /var/www/nodejs-app /var/www/nodejs-app.backup.$(date +%Y%m%d_%H%M%S)
          
          # Extract new files
          cd /var/www/nodejs-app
          tar -xzf /tmp/deployment.tar.gz --strip-components=1
          rm /tmp/deployment.tar.gz
          
          # Install dependencies
          npm ci --production
          
          # Restart application
          pm2 restart nodejs-api || pm2 start ecosystem.config.js --env production
          pm2 save
          
          # Test if application is running
          sleep 5
          curl -f http://localhost:3001/health || exit 1
          
          echo "Deployment completed successfully!"
```

## Step 4: Advanced Workflow with Health Checks

```yaml
name: Advanced Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

env:
  NODE_VERSION: '18.x'
  APP_NAME: 'nodejs-api'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint code
      run: npx eslint . || echo "No ESLint configuration found"
      continue-on-error: true
    
    - name: Run tests
      run: npm test || echo "No tests configured"
      continue-on-error: true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        script: |
          set -e  # Exit on any error
          
          echo "Starting deployment..."
          
          # Navigate to app directory
          cd /var/www/nodejs-app
          
          # Create backup
          sudo cp -r /var/www/nodejs-app /var/www/nodejs-app.backup.$(date +%Y%m%d_%H%M%S)
          
          # Pull latest code (for private repos, ensure SSH or token is configured)
          git stash || true  # Stash any local changes
          git pull origin main
          
          # Install dependencies
          npm ci --production
          
          # Health check before deployment
          if pm2 list | grep -q "${{ env.APP_NAME }}"; then
            echo "Application is running, performing graceful restart..."
            pm2 reload ${{ env.APP_NAME }}
          else
            echo "Starting application..."
            pm2 start ecosystem.config.js --env production
          fi
          
          # Wait for application to start
          sleep 10
          
          # Health check
          if curl -f http://localhost:3001/health; then
            echo "Health check passed!"
            pm2 save
            
            # Clean old backups (keep last 5)
            cd /var/www
            ls -t nodejs-app.backup.* 2>/dev/null | tail -n +6 | xargs rm -rf || true
            
            echo "Deployment successful!"
          else
            echo "Health check failed! Rolling back..."
            pm2 stop ${{ env.APP_NAME }}
            
            # Find latest backup
            LATEST_BACKUP=$(ls -t /var/www/nodejs-app.backup.* 2>/dev/null | head -n1)
            if [ ! -z "$LATEST_BACKUP" ]; then
              sudo rm -rf /var/www/nodejs-app
              sudo mv "$LATEST_BACKUP" /var/www/nodejs-app
              cd /var/www/nodejs-app
              pm2 start ecosystem.config.js --env production
              echo "Rolled back to previous version"
            fi
            exit 1
          fi

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "🚀 Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi
```

## Step 5: Setup GitHub Secrets

Go to your GitHub repository → Settings → Secrets and Variables → Actions → New repository secret

Add these secrets:

### Required Secrets:
- **EC2_HOST**: Your EC2 public IP address
- **EC2_USERNAME**: Usually `ubuntu` for Ubuntu instances
- **EC2_SSH_KEY**: Your private SSH key content
- **EC2_PORT**: SSH port (usually `22`)

### Getting your SSH key content:
```bash
# On your local machine
cat ~/.ssh/your-key.pem
```
Copy the entire content including `-----BEGIN RSA PRIVATE KEY-----` and `-----END RSA PRIVATE KEY-----`

## Step 6: Prepare Your EC2 Instance

### Install Git on EC2 (if not already installed):
```bash
sudo apt update
sudo apt install git -y
```

### Setup your repository on EC2:
```bash
cd /var/www/nodejs-app

# Initialize git and add your repository
git init
git remote add origin https://github.com/yourusername/your-repo.git
git pull origin main

# Set up git credentials (for private repos)
git config --global user.name "Your Name"
git config --global user.email "your-email@example.com"

# For private repositories, you might need to setup SSH keys or use tokens
```

### Method 1: Setup SSH Key for Private Repo (Recommended)

**On your EC2 instance:**
```bash
# Generate SSH key
ssh-keygen -t rsa -b 4096 -C "your-email@example.com" -f ~/.ssh/github_deploy_key

# Copy public key
cat ~/.ssh/github_deploy_key.pub
```

**On GitHub:**
1. Go to your repo → Settings → Deploy keys → Add deploy key
2. Paste the public key content
3. Check "Allow write access" if you want to push from EC2
4. Give it a title like "EC2 Deploy Key"

**Back on EC2:**
```bash
# Add SSH config
cat >> ~/.ssh/config << EOF
Host github.com
    HostName github.com
    User git
    IdentityFile ~/.ssh/github_deploy_key
    StrictHostKeyChecking no
EOF

# Set proper permissions
chmod 600 ~/.ssh/github_deploy_key
chmod 600 ~/.ssh/config

# Test connection
ssh -T git@github.com

# Clone your private repo
git clone git@github.com:yourusername/your-private-repo.git /var/www/nodejs-app
```

### Method 2: Using Personal Access Token

**Create a Personal Access Token:**
1. GitHub → Settings → Developer settings → Personal access tokens → Tokens (classic)
2. Generate new token with `repo` scope
3. Copy the token

**On EC2:**
```bash
# Clone with token
git clone https://your-token@github.com/yourusername/your-private-repo.git /var/www/nodejs-app

# Or set up credential helper
cd /var/www/nodejs-app
git config credential.helper store
echo "https://your-token@github.com" > ~/.git-credentials
```

## Step 7: Update package.json

Add these scripts to your `package.json`:

```json
{
  "scripts": {
    "start": "node app.js",
    "dev": "nodemon app.js",
    "test": "echo \"No tests specified\" && exit 0",
    "lint": "eslint .",
    "pm2:start": "pm2 start ecosystem.config.js --env production",
    "pm2:restart": "pm2 restart nodejs-api",
    "pm2:stop": "pm2 stop nodejs-api",
    "pm2:logs": "pm2 logs nodejs-api"
  }
}
```

## Step 8: Fix Your Code Typo

Update your `app.js` file to fix the typo:

```javascript
const NODE_ENV = process.env.NODE_ENV || "production"  // Fixed typo
```

## Step 9: Workflow Triggers

The workflow will trigger on:
- **Push to main/master branch**: Automatic deployment
- **Manual trigger**: Go to Actions tab → Select workflow → Run workflow

## Step 10: Monitor Deployments

1. **GitHub Actions**: Check the Actions tab in your repository
2. **EC2 Logs**: SSH into EC2 and run `pm2 logs`
3. **Application Health**: Visit your domain to verify deployment

### Method 3: Alternative Workflow with Direct File Transfer

For private repos, you might prefer transferring files directly instead of using git pull:

```yaml
name: Deploy Private Repo to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout private repo
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}  # Automatically available for private repos
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    
    - name: Install dependencies
      run: npm ci --production
    
    - name: Create deployment archive
      run: |
        # Create archive excluding unnecessary files
        tar -czf deployment.tar.gz \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='node_modules' \
          --exclude='*.log' \
          --exclude='.env*' \
          .
    
    - name: Transfer files to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        source: "deployment.tar.gz"
        target: "/tmp/"
    
    - name: Deploy on EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        script: |
          set -e
          
          echo "Starting deployment of private repository..."
          
          # Create backup
          if [ -d "/var/www/nodejs-app" ]; then
            sudo cp -r /var/www/nodejs-app /var/www/nodejs-app.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # Create app directory if it doesn't exist
          sudo mkdir -p /var/www/nodejs-app
          sudo chown ubuntu:ubuntu /var/www/nodejs-app
          
          # Extract new deployment
          cd /var/www/nodejs-app
          tar -xzf /tmp/deployment.tar.gz
          rm /tmp/deployment.tar.gz
          
          # Install production dependencies
          npm ci --production
          
          # Restart application with PM2
          if pm2 list | grep -q "nodejs-api"; then
            echo "Reloading existing application..."
            pm2 reload nodejs-api
          else
            echo "Starting new application..."
            pm2 start ecosystem.config.js --env production
          fi
          
          # Health check
          sleep 5
          if curl -f http://localhost:3001/health; then
            echo "✅ Deployment successful!"
            pm2 save
          else
            echo "❌ Health check failed!"
            exit 1
          fi
```

### Method 4: Using GitHub App Token (Most Secure)

Add this secret to GitHub:
- **GITHUB_APP_TOKEN**: A GitHub App token with repository access

```bash
# In your deployment script
git remote set-url origin https://x-access-token:${{ secrets.GITHUB_APP_TOKEN }}@github.com/yourusername/your-private-repo.git
```
Create a production environment in GitHub with protection rules:
- Repository Settings → Environments → New Environment
- Add protection rules like required reviewers

### 2. Limit Secret Access
- Use environment-specific secrets
- Rotate SSH keys regularly
- Use least privilege principle

### 3. Add Deployment Approval
```yaml
environment: 
  name: production
  url: https://your-domain.com
```

## Troubleshooting Common Issues

### 1. SSH Connection Failed
- Verify EC2_HOST, EC2_USERNAME, EC2_SSH_KEY secrets
- Check EC2 security group allows SSH from GitHub IPs
- Ensure SSH key format is correct

### 2. Git Pull Failed
- Check if git is initialized in the app directory
- Verify repository permissions
- For private repos, setup SSH keys or tokens

### 3. PM2 Command Not Found
```bash
# In your workflow, add PATH
script: |
  export PATH=$PATH:~/.npm-global/bin
  pm2 restart nodejs-api
```

### 4. Permission Issues
```bash
# Fix ownership on EC2
sudo chown -R ubuntu:ubuntu /var/www/nodejs-app
```

This setup provides a complete CI/CD pipeline that will automatically deploy your Node.js application to EC2 whenever you push code to your main branch!